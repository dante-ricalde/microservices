<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.mvp</groupId>
	<artifactId>springboot_docker_tomcat_mongodb</artifactId>
	<version>2.0</version>
	<packaging>war</packaging>

	<name>springBootDockerTomcatMongodb</name>
	<description>Spring Boot and Docker Tutorial with Tomcat and MongoDB Containers</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<docker.image.prefix>dantericalde</docker.image.prefix>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.11</version>
				<configuration>
					<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
					<dockerDirectory>src/main/docker</dockerDirectory>
<!-- 					<dockerHost>http://172.17.0.1:2375</dockerHost> -->
<!-- In the tutorial the docker host is 172.17.0.1 (this is the IP that's actually running the docker host) because this is running 
in the linux host, besides in this case this eclipse is running in a container and the docker host is not in this container,
	is in the linux host
-->			<!-- 		I don't need to specify this localhost so that it takes the default docker host configuration...
						I was getting an error because the daemon was not started at the port 2375 instead I think the daemon was started
						with the unix socket protocol but I didn't see the port, besides this plugin throws an error when you try to specify a tcp protocol
						for the dockerHost, I think that if you specify unix protocol you will get the same error.
					<dockerHost>http://172.17.0.1:2375</dockerHost> -->
					
					<!-- override tags every time image is built with docker:build -->
					<forceTags>true</forceTags>
					<imageTags>
						<imageTag>${project.version}</imageTag>
						<imageTag>latest</imageTag>
					</imageTags>
					
					<!-- You should do this in deploy phase or use -DskipDockerPush -->
					<serverId>docker-hub</serverId>
					<registryUrl>https://hub.docker.com/</registryUrl>
					<noCache>true</noCache>
					
					<resources>
						<resource>
							<targetPath>/</targetPath><!-- This actually is target/docker, namely the src/main/docker contents and the generated war file are going to be copied to this directory target/docker -->
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.war</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
	</build>


</project>
